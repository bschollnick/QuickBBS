<style>
/* Navbar spacing adjustments - balanced white space */
.navbar-start {
    margin-right: 8rem !important;
}

.navbar-end {
    margin-left: auto !important;
    gap: 1.5rem;
    margin-right: 1rem;
}

/* Search input sizing - larger search box */
.navbar-item .control .input {
    width: 300px;
    font-size: 1rem;
}

/* User menu - prevent text wrapping */
.navbar-link,
.navbar-link .icon-text {
    white-space: nowrap;
}

/* User dropdown - increase width */
.navbar-dropdown {
    min-width: 250px;
}

/* Responsive - compact layout for smaller screens */
@media screen and (max-width: 1023px) {
    .navbar-item .control .input {
        width: 200px;
        font-size: 0.875rem;
    }
}
</style>

<nav class="navbar is-light" role="navigation" aria-label="main navigation">
  <div class="navbar-brand">
    <a class="navbar-item" href="{{ url('home') }}">
      <img src="https://bulma.io/images/bulma-logo.png" width="112" height="28" alt="Logo">
    </a>

    <!-- Mobile hamburger menu -->
    <a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" data-target="navbarBasicExample">
      <span aria-hidden="true"></span>
      <span aria-hidden="true"></span>
      <span aria-hidden="true"></span>
    </a>
  </div>

  <div id="navbarBasicExample" class="navbar-menu">
    <div class="navbar-start">
      <a class="navbar-item">
        File
      </a>
      <a class="navbar-item" href="javascript:window.print()">
        Print
      </a>
    </div>

    <div class="navbar-end">
      <!-- Search form -->
      <div class="navbar-item">
        <form action="{{ url('search_viewresults') }}" method="get">
          <div class="field has-addons">
            <div class="control">
              <input id="searchtext" name="searchtext" class="input" type="text"
                     placeholder="Search titles..." value="{{ request.GET.searchtext or searchtext or '' }}">
            </div>
            <div class="control">
              <button type="submit" class="button is-link">
                <span class="icon">
                  <i class="fas fa-search"></i>
                </span>
                <span>Search</span>
              </button>
            </div>
          </div>
        </form>
      </div>

      <!-- User dropdown -->
      {% include 'components/user_menu.jinja' %}
    </div>
  </div>
</nav>

<script>
// Mobile navbar toggle
document.addEventListener('DOMContentLoaded', () => {
  const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0);

  if ($navbarBurgers.length > 0) {
    $navbarBurgers.forEach(el => {
      el.addEventListener('click', () => {
        const target = el.dataset.target;
        const $target = document.getElementById(target);

        el.classList.toggle('is-active');
        $target.classList.toggle('is-active');
      });
    });
  }
});

// Toggle show duplicates preference - Form submit handler
let toggleInProgress = false;
window.handleToggleSubmit = function(event, form) {
  event.preventDefault();
  event.stopPropagation();

  // Prevent double-clicks
  if (toggleInProgress) {
    console.log('Toggle already in progress, ignoring');
    return false;
  }
  toggleInProgress = true;

  console.log('Toggling show duplicates - sending synchronous request...');

  try {
    // Add cache-busting to the toggle endpoint itself
    const timestamp = new Date().getTime();
    const toggleUrl = form.action + '?_t=' + timestamp;

    // Use synchronous XMLHttpRequest to guarantee completion before reload
    const xhr = new XMLHttpRequest();
    xhr.open('GET', toggleUrl, false); // false = synchronous
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
    xhr.setRequestHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    xhr.send();

    console.log('XHR status:', xhr.status);
    console.log('XHR response:', xhr.responseText);

    if (xhr.status === 200) {
      const data = JSON.parse(xhr.responseText);
      console.log('Toggle response data:', data);

      if (data.success) {
        console.log('Toggle successful, reloading page...');
        const timestamp = new Date().getTime();
        const currentUrl = window.location.href.split('?')[0].split('#')[0];
        window.location.href = currentUrl + '?_t=' + timestamp;
      } else {
        console.error('Toggle returned success=false');
        toggleInProgress = false;
      }
    } else {
      console.error('XHR failed with status:', xhr.status);
      toggleInProgress = false;
      alert('Failed to toggle preference (HTTP ' + xhr.status + '). Please try again.');
    }
  } catch (error) {
    console.error('Toggle failed with error:', error);
    toggleInProgress = false;
    alert('Failed to toggle preference. Please try again.');
  }

  return false;
};
</script>
