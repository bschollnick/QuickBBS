# Patch generated by Pyment v0.3.2

--- a/utilities.py
+++ b/utilities.py
@@ -10,29 +10,12 @@
 from django.http import HttpResponse
 
 def is_valid_uuid(uuid_to_test, version=4):
-    """
-    https://stackoverflow.com/questions/19989481
-    Check if uuid_to_test is a valid UUID.
-
-    Parameters
-    ----------
-    uuid_to_test : str
-        UUID code to validate
-    version : int
-        {1, 2, 3, 4}
-
-    Returns
-    -------
-    boolean
-        `True` if uuid_to_test is a valid UUID, otherwise `False`.
-
-    Examples
-    --------
-    >>> is_valid_uuid('c9bf9e57-1685-4c89-bafb-ff5af830be8a')
-    True
-    >>> is_valid_uuid('c9bf9e58')
-    False
-    """
+    """https://stackoverflow.com/questions/19989481
    Check if uuid_to_test is a valid UUID.

    Parameters
    ----------
    uuid_to_test : str
        UUID code to validate
    version : int
        {1, 2, 3, 4}

    Returns
    -------
    boolean
        `True` if uuid_to_test is a valid UUID, otherwise `False`.

    Examples
    --------
    >>> is_valid_uuid('c9bf9e57-1685-4c89-bafb-ff5af830be8a')
    True
    >>> is_valid_uuid('c9bf9e58')
    False
+
+    :param uuid_to_test: 
+    :param version:  (Default value = 4)
+
+    """
     try:
         uuid_obj = uuid.UUID(uuid_to_test, version=version)
     except:
@@ -42,29 +25,20 @@
 
 
 def test_extension(name, ext_list):
-    """
-    Check if filename has an file extension that is in passed list.
-
-    Parameters
-    ----------
-    name : str
-    ext_list : ['zip', 'rar', etc] # list of file extensions (w/o .), lowercase.
-
-    Returns
-    -------
-    `True` if name does match an extension passed, otherwise `False`.
-
-    Examples
-    --------
-    >>> test_extension("test.zip", ['zip', 'cbz'])
-    True
-    >>> test_extension("test.rar", ['zip', 'cbz'])
-    False
-
-    """
+    """Check if filename has an file extension that is in passed list.

    Parameters
    ----------
    name : str
    ext_list : ['zip', 'rar', etc] # list of file extensions (w/o .), lowercase.

    Returns
    -------
    `True` if name does match an extension passed, otherwise `False`.

    Examples
    --------
    >>> test_extension("test.zip", ['zip', 'cbz'])
    True
    >>> test_extension("test.rar", ['zip', 'cbz'])
    False
+
+    :param name: 
+    :param ext_list: 
+
+    """
     return os.path.splitext(name)[1][1:].lower().strip() in ext_list
 
 def is_archive(fqfn):
+    """
+
+    :param fqfn: 
+
+    """
     # None = not an archive.
     """
     Check if filename has an file extension that in the archive file types list
@@ -93,51 +67,25 @@
 #                                            'rar'])
 
 def return_img_attach(filename, binaryblog):
-    """
-    Output a http response header, for an image attachment.
-
-
-    Parameters
-    ----------
-    filename : str
-    binaryblog : The binary blog, that is the http response (eg. Image)
-
-    Returns
-    -------
-    Response header
-
-    Examples
-    --------
-    return_img_attach("test.png", img_data)
-
-    """
+    """Output a http response header, for an image attachment.


    Parameters
    ----------
    filename : str
    binaryblog : The binary blog, that is the http response (eg. Image)

    Returns
    -------
    Response header

    Examples
    --------
    return_img_attach("test.png", img_data)
+
+    :param filename: 
+    :param binaryblog: 
+
+    """
     response = HttpResponse()
     response.write(binaryblog)
     response['Content-Disposition'] = 'attachment; filename={%s}' % filename
     return response
 
 def get_xth_image(database, positional=0, filters=[]):
-    """
-    Return the xth image from the database, using the passed filters
-
-    Parameters
-    ----------
-
-    database : object - The django database handle
-
-    positional : int - 0 is first, if positional is greater than the # of
-                 records, then it is reset to the count of records
-
-    filters : dictionary of filters
-
-    Returns
-    -------
-    If successful the database record in question, otherwise returns None
-
-    Examples
-    --------
-    return_img_attach("test.png", img_data)
-"""
+    """
+
+    :param database: 
+    :param positional:  (Default value = 0)
+    :param filters:  (Default value = [])
+
+    """
     files = database.objects.filter(**filters)
     if files:
         if positional > files.count():
@@ -149,11 +97,12 @@
         return None
 
 def return_image_obj(fs_path, memory=False):
-    """
-    Given a Fully Qualified FileName/Pathname, open the image
-    (or PDF) and return the PILLOW object for the image
-    Fitz == py
-    """
+    """Given a Fully Qualified FileName/Pathname, open the image
    (or PDF) and return the PILLOW object for the image
    Fitz == py
+
+    :param fs_path: 
+    :param memory:  (Default value = False)
+
+    """
     if os.path.splitext(fs_path)[1][1:].lower() == u"pdf":
         pdf_file = fitz.open(fs_path)
         pdf_page = pdf_file.loadPage(0)
@@ -172,14 +121,13 @@
     return source_image
 
 def cr_tnail_img(source_image, size, fext):
-    """
-    Given the PILLOW object, resize the image to <SIZE>
-    and return the saved version of the file (using FEXT
-    as the format to save as [eg. PNG])
-
-    Return the binary representation of the file that
-    was saved to memory
-    """
+    """Given the PILLOW object, resize the image to <SIZE>
    and return the saved version of the file (using FEXT
    as the format to save as [eg. PNG])

    Return the binary representation of the file that
    was saved to memory
+
+    :param source_image: 
+    :param size: 
+    :param fext: 
+
+    """
     image_data = BytesIO()
     source_image.thumbnail((size, size), Image.ANTIALIAS)
     try:
