"""
Django settings for quickbbs project.

Generated by 'django-admin startproject' using Django 1.9.6.
Updated for Django 6.0

For more information on this file, see
https://docs.djangoproject.com/en/stable/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/stable/ref/settings/
"""

import logging
import logging.handlers
import os
import socket
from pathlib import Path

import humanize
from django_htmx.jinja import django_htmx_script

# Apply PIL/Pillow configuration from quickbbs_settings
from PIL import Image, ImageFile

from quickbbs.quickbbs_settings import *

#
#   Debug, enables the debugging mode
#
DEBUG = False
# DEBUG = not DEBUG
print(f"* Debug Mode is {DEBUG}")

#   Django Debug Toolbar, is controlled separately from the debug mode,
#   so that timings can be w/o debug mode performance penalty.
# DEBUG_TOOLBAR = DEBUG
# DEBUG_TOOLBAR = True
DEBUG_TOOLBAR = False
print(f"* Debug-toolbar is {DEBUG_TOOLBAR}")


class SafeTimedRotatingFileHandler(logging.handlers.TimedRotatingFileHandler):
    """TimedRotatingFileHandler that handles race conditions in multi-process environments."""

    def doRollover(self) -> None:
        """Perform rollover with race condition protection."""
        # Ensure the log file exists before attempting rotation
        if not os.path.exists(self.baseFilename):
            # If the file doesn't exist, just create a new one
            if self.stream:
                self.stream.close()
                self.stream = None
            self.stream = self._open()
            return

        try:
            super().doRollover()
        except FileNotFoundError:
            # If another process already rotated the file, just create a new one
            if self.stream:
                self.stream.close()
                self.stream = None
            self.stream = self._open()


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


Image.MAX_IMAGE_PIXELS = PIL_MAX_IMAGE_PIXELS  # pylint: disable=undefined-variable
ImageFile.LOAD_TRUNCATED_IMAGES = PIL_LOAD_TRUNCATED_IMAGES  # pylint: disable=undefined-variable


SECURE_SSL_REDIRECT = True

# Demo mode, redirects the database to a different database container, and album path.
# Useful for demonstrating the software without using your master database.
#
ALBUMS_PATH = "/Volumes/C-8TB/Gallery/quickbbs".lower()

AUTORELOAD_IGNORE_PATHS = [
    os.path.join(ALBUMS_PATH, "albums"),
]
# Add other paths as needed

# Import secrets from secrets.py (NEVER commit secrets.py to version control)
try:
    from quickbbs.secrets import (
        ALLOWED_HOSTS,
        DATABASE_HOST,
        DATABASE_NAME,
        DATABASE_PASSWORD,
        DATABASE_PORT,
        DATABASE_USER,
        INTERNAL_IPS,
        SECRET_KEY,
    )
except ImportError as e:
    raise ImportError(
        "secrets.py not found. Copy secrets.py.example to secrets.py and configure with your credentials."
    ) from e

# ALLOWED_HOSTS is imported from secrets.py
# Example: ["nerv.local", "localhost", "127.0.0.1", "192.168.1.67"]

# INTERNAL_IPS is imported from secrets.py
# Example: ["localhost", "127.0.0.1", "nerv.local", "192.168.1.67"]
machine_name = socket.gethostname().lower()
print(f"* Running on {machine_name}")

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# print(BASE_DIR)
BASE_DIR = Path(__file__).resolve().parent.parent
# print(BASE_DIR)

if not DEBUG:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.db.DatabaseCache",
            "LOCATION": "cache_data_db_table",
            "TIMEOUT": 150,  # ~2.5 minutes
            "OPTIONS": {
                "MAX_ENTRIES": 15000,
                "CULL_FREQUENCY": 3,
            },
        }
    }

# USER_AGENTS_CACHE = 'default'

# Before using the database cache, you must create the cache table with this command:
# python manage.py createcachetable


TEMPLATE_PATH = BASE_DIR / "templates"

# MEDIA_ROOT = os.sep.join((str(BASE_DIR).split(os.sep)[0:-1]))
MEDIA_ROOT = BASE_DIR.resolve().parent
# MEDIA_ROOT =


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECRET_KEY is imported from secrets.py
# SECURITY WARNING: keep the secret key used in production secret!
# Generate a new key with: python -c 'from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())'

# SECURITY WARNING: don't run with debug turned on in production!

# session_cookie_expiration = 43200
# session_logout_timeout = 43200


# Application definition
STATIC_URL = "/static/"

INSTALLED_APPS = []
INSTALLED_APPS += [
    "grappelli",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.staticfiles",
    "django.contrib.sessions",
    "django.contrib.messages",
    "rest_framework",
    "django.contrib.sites",
    "django_user_agents",
    "django_jinja",
]

if DEBUG_TOOLBAR:
    INSTALLED_APPS += ("debug_toolbar",)

INSTALLED_APPS += [
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "cache_watcher",
    "dbbackup",
    "django_icons",
    "django_jinja.contrib._humanize",
    "django_extensions",
    "filetypes",
    "frontend",
    "quickbbs",
    "thumbnails",
    "django_htmx",
]

SITE_ID = 1

SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"

MIDDLEWARE = [
    "allauth.account.middleware.AccountMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "filetypes.middleware.FiletypeLoaderMiddleware",  # Load filetypes once per worker
    "django.middleware.cache.UpdateCacheMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "compression_middleware.middleware.CompressionMiddleware",
    "django.middleware.http.ConditionalGetMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.cache.FetchFromCacheMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_user_agents.middleware.UserAgentMiddleware",
    "django_htmx.middleware.HtmxMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

#    'compression_middleware.middleware.CompressionMiddleware',
# Revisit the django-compression-middleware later, it works, but there is a
# perceivable slowdown on the other end (at least wireless/ipad connection on 5ghz).

if DEBUG:
    MIDDLEWARE.remove("django.middleware.cache.FetchFromCacheMiddleware")
    MIDDLEWARE.remove("django.middleware.cache.UpdateCacheMiddleware")

if not DEBUG_TOOLBAR:
    MIDDLEWARE.remove("debug_toolbar.middleware.DebugToolbarMiddleware")

# Security Settings
X_FRAME_OPTIONS = "DENY"

# HTTPS Security Settings
SECURE_HSTS_SECONDS = 31536000  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_HTTPONLY = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_REFERRER_POLICY = "same-origin"

ROOT_URLCONF = "quickbbs.urls"

# ASGI Application (for async support with uvicorn/hypercorn)
ASGI_APPLICATION = "quickbbs.asgi.application"

TEMPLATES = [
    {
        "NAME": "Django",
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            TEMPLATE_PATH,
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
    # https://docs.djangoproject.com/en/2.1/ref/templates/api/#django.template.loaders.cached.Loader
    {
        "NAME": "Jinja2",
        "BACKEND": "django_jinja.backend.Jinja2",
        "APP_DIRS": True,
        "DIRS": [
            TEMPLATE_PATH,
        ],
        "OPTIONS": {
            # Match the template names ending in .html but not the ones in the admin folder.
            "match_extension": ".jinja",
            "extensions": [
                "jinja2.ext.do",
                "jinja2.ext.loopcontrols",
                "jinja2.ext.i18n",
                "django_jinja.builtins.extensions.CsrfExtension",
                "django_jinja.builtins.extensions.CacheExtension",
                "django_jinja.builtins.extensions.TimezoneExtension",
                "django_jinja.builtins.extensions.UrlsExtension",
                "django_jinja.builtins.extensions.StaticFilesExtension",
                "django_jinja.builtins.extensions.DjangoFiltersExtension",
            ],
            "globals": {
                "icon": "django_icons.templatetags.icons.icon_tag",
                "static": "django.templatetags.static.static",
                "url": "django.urls.reverse",
                "django_htmx_script": django_htmx_script,
                "any": any,
                "all": all,
                "naturaldelta": humanize.naturaldelta,
                "precisedelta": humanize.precisedelta,
                "naturalsize": humanize.naturalsize,
            },
            "constants": {
                # "bulma_uri": BULMA_URI,
                # "fontawesome_uri": FONTAWESOME_URI,
                # "fontawesome_script_uri": FONTAWESOME_SCRIPT_URI,
                # "jquery_uri": JQUERY_URI,
                # "pdf_js_viewer_uri": PDF_JS_VIEWER_URI,
                # "django_htmx_uri": DJANGO_HTMX_URI,
            },
            "bytecode_cache": {
                "name": "default",
                "backend": "django_jinja.cache.BytecodeCache",
                "enabled": not DEBUG,  # needs to be negated, since TRUE for debug should be enabled - False
            },
            "autoescape": True,
            "auto_reload": True,
            "translation_engine": "django.utils.translation",
        },
    },
]

WSGI_APPLICATION = "quickbbs.wsgi.application"

# Database configuration - credentials imported from secrets.py
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": DATABASE_NAME,  # Imported from secrets.py
        "USER": DATABASE_USER,  # Imported from secrets.py
        "PASSWORD": DATABASE_PASSWORD,  # Imported from secrets.py
        "HOST": DATABASE_HOST,  # Imported from secrets.py
        "PORT": DATABASE_PORT,  # Imported from secrets.py
        "CONN_MAX_AGE": 0,  # Keep connections alive for 60 seconds
        "OPTIONS": {
            "pool": {
                "min_size": 1,
                "max_size": 125,
                "max_lifetime": 100,
                "max_idle": 60,
                "timeout": 90,
            },
        },
    }
}

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
)

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "en-us"
USE_I18N = True
# USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "static")

STATICFILES_DIRS = [
    RESOURCES_PATH,
]

# STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"
# Using default StaticFilesStorage to avoid manifest issues
# STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"

ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True
ACCOUNT_LOGOUT_REDIRECT_URL = "/albums"
LOGIN_REDIRECT_URL = "/albums"


DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Settings for django-icons
DJANGO_ICONS = {
    "DEFAULTS": {
        "renderer": "fontawesome4",
    },
}


def show_toolbar(request):
    return DEBUG_TOOLBAR is True


if DEBUG_TOOLBAR:
    DEBUG_TOOLBAR_CONFIG = {
        # Toolbar options
        "RESULTS_CACHE_SIZE": 100,
        "SHOW_COLLAPSED": False,
        "SHOW_TOOLBAR_CALLBACK": show_toolbar,
        "SQL_WARNING_THRESHOLD": 100,  # milliseconds
        "SHOW_TEMPLATE_CONTEXT": True,
    }

    DEBUG_TOOLBAR_PANELS = [
        "debug_toolbar.panels.history.HistoryPanel",  # Here it is
        "debug_toolbar.panels.versions.VersionsPanel",
        "debug_toolbar.panels.timer.TimerPanel",
        "debug_toolbar.panels.settings.SettingsPanel",
        "debug_toolbar.panels.headers.HeadersPanel",
        "debug_toolbar.panels.request.RequestPanel",
        "debug_toolbar.panels.sql.SQLPanel",
        "debug_toolbar.panels.templates.TemplatesPanel",
        "debug_toolbar.panels.staticfiles.StaticFilesPanel",
        "debug_toolbar.panels.cache.CachePanel",
        "debug_toolbar.panels.signals.SignalsPanel",
        "debug_toolbar.panels.logging.LoggingPanel",
        "debug_toolbar.panels.redirects.RedirectsPanel",
    ]

# Django-dbbackup settings
DBBACKUP_STORAGE = "django.core.files.storage.FileSystemStorage"
DBBACKUP_STORAGE_OPTIONS = {
    "location": os.path.join(BASE_DIR.parent, "backups", "database"),
}
DBBACKUP_CLEANUP_KEEP = 5  # Keep 30 most recent backups
DBBACKUP_CLEANUP_KEEP_MEDIA = 30  # Keep 30 most recent media backups
DBBACKUP_FILENAME_TEMPLATE = "quickbbs-{datetime}.{extension}"
DBBACKUP_MEDIA_FILENAME_TEMPLATE = "quickbbs-media-{datetime}.{extension}"

# Optional: Encrypt backups (requires cryptography package)
# DBBACKUP_GPG_RECIPIENT = 'your-gpg-key-id'

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {asctime} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "rotating_file": {
            "level": "INFO",
            "class": "quickbbs.settings.SafeTimedRotatingFileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "django.log"),
            "when": "midnight",
            "interval": 1,
            "backupCount": 30,
            "formatter": "verbose",
            "encoding": "utf-8",
        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["rotating_file", "console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["rotating_file", "console"],  # Both handlers
            "level": "INFO",
            "propagate": False,
        },
        "django.request": {
            "handlers": ["rotating_file", "console"],  # Both handlers
            "level": "WARNING",
            "propagate": False,
        },
        "myapp": {
            "handlers": ["rotating_file", "console"],  # Both handlers
            "level": "INFO",
            "propagate": False,
        },
    },
}
