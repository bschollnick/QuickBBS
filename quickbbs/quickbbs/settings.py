"""
Django settings for quickbbs project.

Generated by 'django-admin startproject' using Django 1.9.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

from __future__ import absolute_import
from __future__ import print_function
import os
import socket
import quickbbs.jinjaenv

#ALLOWED_HOSTS = [u'nerv.local', u'localhost', u'127.0.0.1']
ALLOWED_HOSTS = [u'nerv.local', u'localhost', u'127.0.0.1']
INTERNAL_IPS = [u'localhost', '127.0.0.1', u'nerv.local']
machine_name = socket.gethostname().lower()
print ("Running on %s" % machine_name)

DEBUG = True
DEBUG = not DEBUG
print("Debug is ", DEBUG)

#DEBUG_TOOLBAR = True
DEBUG_TOOLBAR = False

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

if not DEBUG:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'cache_data_db_table',
            'TIMEOUT': 300,
            'OPTIONS': {
                'MAX_ENTRIES': 22000
            }
        }
    }

USER_AGENTS_CACHE = 'default'

# Before using the database cache, you must create the cache table with this command:
# python manage.py createcachetable


TEMPLATE_PATH = os.path.join(BASE_DIR, 'templates')
MEDIA_ROOT = os.sep.join((BASE_DIR.split(os.sep)[0:-1]))

# MEDIA_ROOT =
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'isk^$ye4rx0m!p#0147tcmmmtcz1u&suzp2+z+6#gpjx^1lz4t'

# SECURITY WARNING: don't run with debug turned on in production!



# Application definition

if DEBUG_TOOLBAR:
    INSTALLED_APPS += ('debug_toolbar',)

STATIC_URL = '/static/'

INSTALLED_APPS = []
INSTALLED_APPS += [
    'grappelli',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.staticfiles',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django_user_agents',
    'django_jinja',
#    'django_jinja.contrib._humanize',
#    'django.contrib.humanize',]
    ]

INSTALLED_APPS += [
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'quickbbs',
    'frontend',
#    'fontawesome-free',
    'django_icons',
    'django_jinja.contrib._humanize'
]

INSTALLED_APPS += ('bootstrap3',)
#INSTALLED_APPS += ('django_jinja.contrib._humanize',)

SITE_ID = 1

# SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
#SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

# Now this assumes you can safely lose any data you store in your user sessions.
# If thats not the case, you can still get some benefit from using:

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

MIDDLEWARE = []

if DEBUG_TOOLBAR:
    MIDDLEWARE += ('debug_toolbar.middleware.DebugToolbarMiddleware',)

MIDDLEWARE += [
#    'quickbbs.middleware.filter_ips.FilterHostMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
#    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_user_agents.middleware.UserAgentMiddleware',
]
if DEBUG_TOOLBAR:
    MIDDLEWARE += ('debug_toolbar.middleware.DebugToolbarMiddleware')
#        'django.middleware.cache.UpdateCacheMiddleware',
#        'django.middleware.common.CommonMiddleware',
#        'django.middleware.cache.FetchFromCacheMiddleware',)


#if DEBUG:
#    MIDDLEWARE += ('profiler.middleware.ProfilerMiddleware',
#                   'profiler.middleware.StatProfMiddleware')

X_FRAME_OPTIONS = 'SAMEORIGIN'

ROOT_URLCONF = 'quickbbs.urls'

TEMPLATES = [
    {
        'NAME': "Django",
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_PATH,],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },

    # https://docs.djangoproject.com/en/2.1/ref/templates/api/#django.template.loaders.cached.Loader

    {   'NAME': "Jinja2",
        "BACKEND": "django_jinja.backend.Jinja2",
        "APP_DIRS": True,
        'DIRS': [TEMPLATE_PATH,],
        "OPTIONS": {'environment': "quickbbs.jinjaenv.environment",
            # Match the template names ending in .html but not the ones in the admin folder.
            "match_extension": ".jinja",
            "extensions": [
                "jinja2.ext.do",
                "jinja2.ext.loopcontrols",
                "jinja2.ext.with_",
                "jinja2.ext.i18n",
                "jinja2.ext.autoescape",
                "django_jinja.builtins.extensions.CsrfExtension",
                "django_jinja.builtins.extensions.CacheExtension",
                "django_jinja.builtins.extensions.TimezoneExtension",
                "django_jinja.builtins.extensions.UrlsExtension",
                "django_jinja.builtins.extensions.StaticFilesExtension",
                "django_jinja.builtins.extensions.DjangoFiltersExtension",
            ],
             "bytecode_cache": {
                 "name": "default",
                 "backend": "django_jinja.cache.BytecodeCache",
                 "enabled": True,
             },
             "autoescape": True,
             "auto_reload": True,
             "translation_engine": "django.utils.translation",
         }
    },
]

#WSGI_APPLICATION = 'quickbbs.wsgi.application'
#WSGI_APPLICATION = 'wsgi.application'

# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {'default': {'ENGINE': 'django.db.backends.postgresql',
                         'NAME': 'postgres',
                         'USER': 'postgres',
                         'PASSWORD': 'hentai2020',
                         'HOST': 'localhost',
                         'PORT': '5432',
                         'CONN_MAX_AGE':300,
                        }
             }


SOUTH_DATABASE_ADAPTERS = {
'default': 'south.db.postgresql_psycopg2',
}
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/
LANGUAGE_CODE = 'en-us'
# TIME_ZONE = 'UTC'
#TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, "static")

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static", "javascript"),
    os.path.join(BASE_DIR, "static", "css"),
    os.path.join(BASE_DIR, "static", "fonts"),
#    os.path.join(BASE_DIR, "static", "thumbnails"),
]

ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True
ACCOUNT_LOGOUT_REDIRECT_URL = "/albums"
LOGIN_REDIRECT_URL = '/albums'

# Default settings
BOOTSTRAP3 = {
    # The complete URL to the Bootstrap CSS file
    # Note that a URL can be either
    # - a string, e.g. "//code.jquery.com/jquery.min.js"
    # - a dict like the default value below (use key "url" for the actual link)
    "css_url": {
        "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css",
        "integrity": "sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u",
        "crossorigin": "anonymous",
    },

    # The complete URL to the Bootstrap CSS file (None means no theme)
    "theme_url": None,

    # The complete URL to the Bootstrap JavaScript file
    "javascript_url": {
        "url": "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js",
        "integrity": "sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa",
        "crossorigin": "anonymous",
    },

    # The URL to the jQuery JavaScript file
    "jquery_url": "//code.jquery.com/jquery.min.js",

    # Put JavaScript in the HEAD section of the HTML document (only relevant if you use bootstrap3.html)
    "javascript_in_head": False,

    # Include jQuery with Bootstrap JavaScript (affects django-bootstrap3 template tags)
    "include_jquery": False,

    # Label class to use in horizontal forms
    "horizontal_label_class": "col-md-3",

    # Field class to use in horizontal forms
    "horizontal_field_class": "col-md-9",

    # Set placeholder attributes to label if no placeholder is provided.
    # This also considers the "label" option of {% bootstrap_field %} tags.
    "set_placeholder": True,

    # Class to indicate required (better to set this in your Django form)
    "required_css_class": "",

    # Class to indicate error (better to set this in your Django form)
    "error_css_class": "has-error",

    # Class to indicate success, meaning the field has valid input (better to set this in your Django form)
    "success_css_class": "has-success",

    # Renderers (only set these if you have studied the source and understand the inner workings)
    "formset_renderers":{
        "default": "bootstrap3.renderers.FormsetRenderer",
    },
    "form_renderers": {
        "default": "bootstrap3.renderers.FormRenderer",
    },
    "field_renderers": {
        "default": "bootstrap3.renderers.FieldRenderer",
        "inline": "bootstrap3.renderers.InlineFieldRenderer",
    },
}
#from .logger import LOGGING

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'
